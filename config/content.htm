<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-Steven901128">https://github.com/mdecp2024/hw-Steven901128</a></p>
<p>個人網站:<a href="https://github.com/Steven901128">https://github.com/Steven901128</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p><strong></strong></p>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9EErUDnX7HY" width="560"></iframe></p>
<h3>w10</h3>
<p>第一題</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="//www.youtube.com/embed/kHGXVpUdk7A" width="560"></iframe></p>
<p>第二題</p>
<p><br/><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="//www.youtube.com/embed/z2FT1jDXfnU" width="560"></iframe></p>
<p>第三題 心得:<span>發現了一個非常好用的程式碼，只要將其中的數據換成自己需要的，就可以像一台專屬科目的計算機，非常方便。</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/YvNqPCDnYSQ" width="560"></iframe></p>
<p></p>
<p></p>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/7f59e9cd03e8e598bd234d1909867479/raw/40b1e0600adcf3c4149469661dd5c7b9b57bc7c3/EX1.py">第一題程式</a></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/7f59e9cd03e8e598bd234d1909867479/raw/40b1e0600adcf3c4149469661dd5c7b9b57bc7c3/EX1-2.py">第二題程式碼</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/L4yzWJcH-2c" width="560"></iframe></p>
<p><a href="https://gist.github.com/7f59e9cd03e8e598bd234d1909867479.git">gist 程式碼連結</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 20

# gs*tc = canvas width and height
ctx = canvas.getContext("2d")

def dRect(lux, luy, w, h, s=1, c='lightgrey'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

def grid(width, height, grid_pix):
    # x 方向共 width 格
    # y 方向共 height 格
    # grid_pix, 每一個的 pixel 點數
    # 利用迴圈與座標增量繪圖
    for i in range(width):
        for j in range(height):
            dRect(i*grid_pix, j*grid_pix, grid_pix, grid_pix, 1, "lightgrey")

def fill(x, y, color):
    ctx.fillStyle = color
    ctx.fillRect(x-1, y-1, gs, gs)

# 預設參數
center_x, center_y = 5, 5  # 圓心
radius = 4  # 預設圓的半徑
grid_width, grid_height = 11, 11  # 預設格子寬高

# 在 grid 中畫圓
def draw_circle():
    ctx.clearRect(0, 0, canvas.width, canvas.height)  # 清空畫布
    grid(grid_width, grid_height, gs)  # 重新繪製格子
    for i in range(grid_width):
        for j in range(grid_height):
            # 計算 (i,j) 到圓心的距離
            dist = math.sqrt((i - center_x) ** 2 + (j - center_y) ** 2)
            if abs(dist - radius) &lt; 0.5:  # 若該點在圓邊界，填色
                fill(i * gs, j * gs, "black")

# 建立輸入框和按鈕
input_width = html.INPUT(type="number", value=grid_width, min=5, max=20, step=1)
input_height = html.INPUT(type="number", value=grid_height, min=5, max=20, step=1)
input_radius = html.INPUT(type="number", value=radius, min=1, max=10, step=0.1)

input_width.attrs["style"] = "margin-right: 10px;"
input_height.attrs["style"] = "margin-right: 10px;"
input_radius.attrs["style"] = "margin-right: 10px;"

btn_draw = html.BUTTON("重新繪製")

# 添加事件監聽
def update_circle(ev):
    global radius, grid_width, grid_height, center_x, center_y
    try:
        grid_width = int(input_width.value)  # 讀取格子寬度
        grid_height = int(input_height.value)  # 讀取格子高度
        radius = float(input_radius.value)  # 讀取圓的半徑
        center_x, center_y = grid_width // 2, grid_height // 2  # 更新圓心
        draw_circle()  # 重新繪製
    except ValueError:
        print("請輸入有效的數值")  # 顯示錯誤訊息

btn_draw.bind("click", update_circle)

# 加入到 HTML 畫面中
brython_div &lt;= html.P("背景寬度:")
brython_div &lt;= input_width
brython_div &lt;= html.P("背景高度:")
brython_div &lt;= input_height
brython_div &lt;= html.P("圓的半徑:")
brython_div &lt;= input_radius
brython_div &lt;= btn_draw

# 畫出背景格子
grid(grid_width, grid_height, gs)

# 畫圓形區域
draw_circle()</pre>
<p><br/><br/>w12</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/P5X8JwNb1mo" width="560"></iframe></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/81ffc36d349314b2b8d8910fafeb4751/raw/8dafc297b7c03bd73e5a1b655e6e8dcad1ae02da/w12-1">程式碼連結</a></p>
<h3>w12</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/P5X8JwNb1mo" width="560"></iframe></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/81ffc36d349314b2b8d8910fafeb4751/raw/8dafc297b7c03bd73e5a1b655e6e8dcad1ae02da/w12-1">程式碼連結</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n = 5
space = "_"
'''
for i in range(n): # 對於每一行
    # 印出空格
    print(space * (n - i - 1), end=' ')
'''
"""
for i in range(n): # 對於每一行
    # 印出空格
    print(space * (n - i - 1), end=' ')
"""
for i in range(n): # 對於每一行
    # 印出空格
    #print(space * (n - i - 1), end=' ')
    print("目前的數字為 " + str(i))</pre>
<p></p>
<h3>w12_hw</h3>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/01">01程式碼</a></p>
<p>所運用到的程式語法為print，執行後會顯示你輸入在print後的字串</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/02">02程式碼</a></p>
<p>使用到的語法是input及print，執行後，他會出現提示框，讓你輸入自己想要的字串，再將字串放到預設好的對話當中。</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/03">03程式碼</a></p>
<p>同樣是<span>input和print，還有涉及到if，else的語法，若是有做出設計者預設的答案，就會做出不同的回應。</span></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/04">04程式碼</a></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/05">05程式碼</a></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/06">06程式碼</a></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/07">07程式碼 (待修正)</a></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/08">08程式碼</a></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/09">09程式碼</a></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/10">10程式碼</a></p><h3>w13_hw</h3>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1  # 設定邊框線寬

# 繪製對角線，顏色設定為藍色
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(20, 20)  # 調整起點位置
ctx.lineTo(100, 100)  # 終點設為大正方形的右下角
ctx.stroke()

# 繪製外接圓，圓心位於第一個矩形的中央
center_x1 = 20 + 80 / 2  # 第一個矩形的X中心
center_y1 = 20 + 80 / 2  # 第一個矩形的Y中心

# 半徑為第一個矩形對角線的一半
radius1 = (80 * (2 ** 0.5)) / 2

# 繪製外接圓
ctx.strokeStyle = 'green'  # 設定圓的顏色為綠色
ctx.beginPath()
ctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)  # 圓心 (center_x1, center_y1) 和半徑
ctx.stroke()

# 繪製外接圓，圓心位於第二個矩形的中央
center_x2 = 60 + 80 / 2  # 第二個矩形的X中心
center_y2 = 60 + 80 / 2  # 第二個矩形的Y中心

# 半徑為第二個矩形對角線的一半
radius2 = (80 * (2 ** 0.5)) / 2

# 繪製外接圓
ctx.strokeStyle = 'purple'  # 設定圓的顏色為紫色
ctx.beginPath()
ctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)  # 圓心 (center_x2, center_y2) 和半徑
ctx.stroke()

# 繪製第一個矩形，並填充顏色
ctx.fillStyle = 'yellow'  # 設定填充顏色為黃色
ctx.strokeStyle = 'red'   # 設定邊框顏色為紅色

ctx.rect(20, 20, 80, 80)  # 設定矩形的位置和大小，縮小為 80x80
ctx.stroke()  # 繪製邊框
ctx.beginPath()

# 繪製第二個矩形
ctx.strokeStyle = 'red'    # 設定邊框顏色為紅色
ctx.beginPath()
ctx.rect(60, 60, 80, 80)  # 設定第二個矩形的位置和大小，縮小為 60x60
ctx.stroke()  # 繪製邊框

# 填充圓形的區域，排除與正方形的重疊部分
ctx.globalCompositeOperation = 'source-over'  # 設定為填充模式
ctx.fillStyle = 'lightblue'  # 設定圓形內部填充顏色為淺藍色

# 填充第一個圓形
ctx.beginPath()
ctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)
ctx.fill()

# 填充第二個圓形
ctx.beginPath()
ctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)
ctx.fill()

# 刪除圓形與正方形重疊的區域
ctx.globalCompositeOperation = 'destination-out'  # 設定為刪除重疊區域模式

# 刪除第一個圓與正方形重疊的區域
ctx.beginPath()
ctx.rect(20, 20, 80, 80)  # 第一個矩形區域
ctx.fill()

# 刪除第二個圓與正方形重疊的區域
ctx.beginPath()
ctx.rect(60, 60, 80, 80)  # 第二個矩形區域
ctx.fill()

# 填充重疊區域的顏色（位於兩個正方形重疊的區域）
ctx.globalCompositeOperation = 'source-over'  # 恢復填充模式
ctx.fillStyle = 'orange'  # 設定重疊區域填充顏色為橙色

# 填充第一個矩形的內部
ctx.globalCompositeOperation = 'source-over'  # 設定為填充模式
ctx.fillStyle = 'lightyellow'  # 設定填充顏色
ctx.beginPath()
ctx.rect(20, 20, 80, 80)  # 第一個矩形區域
ctx.fill()

# 填充第二個矩形的內部
ctx.fillStyle = 'orange'  # 設定填充顏色
ctx.beginPath()
ctx.rect(60, 60, 80, 80)  # 第二個矩形區域
ctx.fill()

# 填充第一個圓形和矩形之間的空白區域
ctx.fillStyle = 'lightblue'  # 設定填充顏色
ctx.beginPath()
ctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)
ctx.rect(20, 20, 80, 80)  # 使用複合模式
ctx.globalCompositeOperation = 'destination-over'  # 填充背景模式
ctx.fill()

# 填充第二個圓形和矩形之間的空白區域
ctx.fillStyle = 'pink'  # 設定填充顏色
ctx.beginPath()
ctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)
ctx.rect(60, 60, 80, 80)  # 使用複合模式
ctx.globalCompositeOperation = 'destination-over'
ctx.fill()

# 重置繪圖操作模式
ctx.globalCompositeOperation = 'source-over'

# 重疊區域填充
ctx.beginPath()
ctx.rect(60, 60, 40, 40)  # 重疊區域的範圍 (兩個矩形重疊部分)
ctx.fill()

# 重新繪製斜線，確保它在最上層
ctx.strokeStyle = 'blue'  # 設定斜線顏色為藍色
ctx.beginPath()
ctx.moveTo(20, 20)
ctx.lineTo(100, 100)  # 斜線終點設為大正方形的右下角
ctx.stroke()

# 最後繪製所有的邊框，確保線條不被遮蓋
ctx.strokeStyle = 'red'   # 第一個矩形的邊框顏色
ctx.beginPath()
ctx.rect(20, 20, 80, 80)  # 第一個矩形的位置和大小
ctx.stroke()

ctx.strokeStyle = 'red'  # 第二個矩形的邊框顏色
ctx.beginPath()
ctx.rect(60, 60, 80, 80)  # 第二個矩形的位置和大小
ctx.stroke()

ctx.strokeStyle = 'black'  # 圓形邊框顏色
ctx.beginPath()
ctx.arc(center_x1, center_y1, radius1, 0, 2 * 3.14159)  # 第一個圓
ctx.stroke()

ctx.beginPath()
ctx.arc(center_x2, center_y2, radius2, 0, 2 * 3.14159)  # 第二個圓
ctx.stroke()
</script>
</p><h1>HW2</h1>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

ctx.lineWidth = 1
ctx.strokeStyle = 'blue'  
ctx.beginPath() 
ctx.moveTo(10, 10)
ctx.lineTo(210, 210)
ctx.stroke()
</script>
</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>