<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-Steven901128">https://github.com/mdecp2024/hw-Steven901128</a></p>
<p>個人網站:<a href="https://github.com/Steven901128">https://github.com/Steven901128</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p><strong></strong></p>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9EErUDnX7HY" width="560"></iframe></p>
<h3>w10</h3>
<p>第一題</p>
<p><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="//www.youtube.com/embed/kHGXVpUdk7A" width="560"></iframe></p>
<p>第二題</p>
<p><br/><iframe allowfullscreen="allowfullscreen" data-mce-fragment="1" height="314" src="//www.youtube.com/embed/z2FT1jDXfnU" width="560"></iframe></p>
<p>第三題 心得:<span>發現了一個非常好用的程式碼，只要將其中的數據換成自己需要的，就可以像一台專屬科目的計算機，非常方便。</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/YvNqPCDnYSQ" width="560"></iframe></p>
<p></p>
<p></p>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/7f59e9cd03e8e598bd234d1909867479/raw/40b1e0600adcf3c4149469661dd5c7b9b57bc7c3/EX1.py">第一題程式</a></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/7f59e9cd03e8e598bd234d1909867479/raw/40b1e0600adcf3c4149469661dd5c7b9b57bc7c3/EX1-2.py">第二題程式碼</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/L4yzWJcH-2c" width="560"></iframe></p>
<p><a href="https://gist.github.com/7f59e9cd03e8e598bd234d1909867479.git">gist 程式碼連結</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 20

# gs*tc = canvas width and height
ctx = canvas.getContext("2d")

def dRect(lux, luy, w, h, s=1, c='lightgrey'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

def grid(width, height, grid_pix):
    # x 方向共 width 格
    # y 方向共 height 格
    # grid_pix, 每一個的 pixel 點數
    # 利用迴圈與座標增量繪圖
    for i in range(width):
        for j in range(height):
            dRect(i*grid_pix, j*grid_pix, grid_pix, grid_pix, 1, "lightgrey")

def fill(x, y, color):
    ctx.fillStyle = color
    ctx.fillRect(x-1, y-1, gs, gs)

# 預設參數
center_x, center_y = 5, 5  # 圓心
radius = 4  # 預設圓的半徑
grid_width, grid_height = 11, 11  # 預設格子寬高

# 在 grid 中畫圓
def draw_circle():
    ctx.clearRect(0, 0, canvas.width, canvas.height)  # 清空畫布
    grid(grid_width, grid_height, gs)  # 重新繪製格子
    for i in range(grid_width):
        for j in range(grid_height):
            # 計算 (i,j) 到圓心的距離
            dist = math.sqrt((i - center_x) ** 2 + (j - center_y) ** 2)
            if abs(dist - radius) &lt; 0.5:  # 若該點在圓邊界，填色
                fill(i * gs, j * gs, "black")

# 建立輸入框和按鈕
input_width = html.INPUT(type="number", value=grid_width, min=5, max=20, step=1)
input_height = html.INPUT(type="number", value=grid_height, min=5, max=20, step=1)
input_radius = html.INPUT(type="number", value=radius, min=1, max=10, step=0.1)

input_width.attrs["style"] = "margin-right: 10px;"
input_height.attrs["style"] = "margin-right: 10px;"
input_radius.attrs["style"] = "margin-right: 10px;"

btn_draw = html.BUTTON("重新繪製")

# 添加事件監聽
def update_circle(ev):
    global radius, grid_width, grid_height, center_x, center_y
    try:
        grid_width = int(input_width.value)  # 讀取格子寬度
        grid_height = int(input_height.value)  # 讀取格子高度
        radius = float(input_radius.value)  # 讀取圓的半徑
        center_x, center_y = grid_width // 2, grid_height // 2  # 更新圓心
        draw_circle()  # 重新繪製
    except ValueError:
        print("請輸入有效的數值")  # 顯示錯誤訊息

btn_draw.bind("click", update_circle)

# 加入到 HTML 畫面中
brython_div &lt;= html.P("背景寬度:")
brython_div &lt;= input_width
brython_div &lt;= html.P("背景高度:")
brython_div &lt;= input_height
brython_div &lt;= html.P("圓的半徑:")
brython_div &lt;= input_radius
brython_div &lt;= btn_draw

# 畫出背景格子
grid(grid_width, grid_height, gs)

# 畫圓形區域
draw_circle()</pre>
<p><br/><br/>w12</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/P5X8JwNb1mo" width="560"></iframe></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/81ffc36d349314b2b8d8910fafeb4751/raw/8dafc297b7c03bd73e5a1b655e6e8dcad1ae02da/w12-1">程式碼連結</a></p>
<h3>w12</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/P5X8JwNb1mo" width="560"></iframe></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/81ffc36d349314b2b8d8910fafeb4751/raw/8dafc297b7c03bd73e5a1b655e6e8dcad1ae02da/w12-1">程式碼連結</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n = 5
space = "_"
'''
for i in range(n): # 對於每一行
    # 印出空格
    print(space * (n - i - 1), end=' ')
'''
"""
for i in range(n): # 對於每一行
    # 印出空格
    print(space * (n - i - 1), end=' ')
"""
for i in range(n): # 對於每一行
    # 印出空格
    #print(space * (n - i - 1), end=' ')
    print("目前的數字為 " + str(i))</pre>
<p></p>
<h3>w12_hw</h3>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/01">01程式碼</a></p>
<p>所運用到的程式語法為print，執行後會顯示你輸入在print後的字串</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/02">02程式碼</a></p>
<p>使用到的語法是input及print，執行後，他會出現提示框，讓你輸入自己想要的字串，再將字串放到預設好的對話當中。</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/03">03程式碼</a></p>
<p>同樣是<span>input和print，還有用到if，else的語法，若是有做出設計者預設的答案，就會做出不同的回應。</span></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/04">04程式碼</a></p>
<p>有用到input、print、if、else、in的語法，利用了購物車的概念，將需要購買的東西用in語法增加在list中，也可以刪除不要的東西。</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/05">05程式碼</a></p>
<p>新增了.index、.pop、.insert語法.index是用來搜尋，如果沒有會跳出error，pop則是移除列表中的索引，若()中是空白，則會刪除最後一個索引。</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/06">06程式碼</a></p>
<p>主要在教學列表的使用方式，【】內第一個是起點，第二個數字是終點，第三個數字是每多少輸出一次。</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/07">07程式碼</a></p>
<p>增加了del的語法，<span class="Y2IQFc" lang="zh-TW">是一個用於刪除物件、變數、列表元素、字典項目等關鍵字，類似加入購物車後，不想要購買就按下刪除觸發del的這個語法。</span></p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/08">08程式碼</a></p>
<p>使用了for...in range的語法，從列表中選出要的字串來表示。</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/09">09程式碼</a></p>
<p>用到了for...loop，else的語法，操作列表list進行迴圈處理，使用if...else來檢查條件成立，來判斷是不是我們想要的東西。</p>
<p><a href="https://literate-palm-tree-r4p4rx5pqjrghpp69-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/5676c61a4047819962829fd4baa3bbef/raw/44a9468e7e429f39bf5ae42aab065c0e7503aea1/10">10程式碼</a></p>
<p>用for迴圈查看list列表並根據是否條件成立並進行輸出。</p>
<h3>w13_ai</h3>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 4

# 混色的
ctx.globalCompositeOperation = "screem"

# 黑邊圓*2 (每個畫四個邊邊)
ctx.strokeStyle = 'black'

# 第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "SkyBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "Coral"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "LimeGreen"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "Beige"  
ctx.fill()
ctx.stroke()

# 第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "DarkOrchid" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "ForestGreen"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "Gold"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "Crimson" 
ctx.fill()
ctx.stroke()

# 紅方形*2 (4個三角形)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(60, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "LightYellow" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 60)
ctx.lineTo(260, 260)
ctx.fillStyle = "DarkSlateBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(360, 160)
ctx.lineTo(360, 360)
ctx.fillStyle = "LightCyan" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 360)
ctx.lineTo(360, 360)
ctx.fillStyle = "PaleGreen"  
ctx.fill()
ctx.stroke()

# 重疊的小方型
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "SteelBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(260, 160)
ctx.lineTo(260, 260)
ctx.fillStyle = "MediumPurple" 
ctx.fill()
ctx.stroke()

# 藍斜線
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(360, 360)
ctx.stroke()
</script>
</p>
<h3>w13_hw</h3>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 定義畫布的大小（變數設定）
canvas_width = 400
canvas_height = 400

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=canvas_width, height=canvas_height)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 定義正方形的起始位置和邊長
square1_x = 50
square1_y = 50
square1_size = 150

square2_x = 200
square2_y = 200
square2_size = 150

# 定義圓的圓心和半徑
circle1_center = (150, 200)
circle1_radius = 100
circle2_center = (250, 200)
circle2_radius = 100

# 定義步長（每幾個像素檢查一次）
step_size = 10
circle_radius = max(step_size / 2, 1)

# 定義顏色
colors = {
    "circle1": "red",       # 第一圓內部
    "circle2": "blue",      # 第二圓內部
    "square1": "green",     # 第一正方形內部
    "square2": "yellow",    # 第二正方形內部
    "top": "cyan",          # 上方區域
    "bottom": "magenta",    # 下方區域
    "left": "yellow",       # 左側區域
    "right": "pink",        # 右側區域
    "top_left": "green",    # 上左交界區域
    "top_right": "orange",  # 上右交界區域
    "bottom_left": "purple",# 下左交界區域
    "bottom_right": "brown",# 下右交界區域
    "diagonal_above": "lightblue",  # 對角線上方
    "diagonal_below": "lightgreen"  # 對角線下方
}

# 繪製圓形和正方形
def draw_shapes():
    # 繪製第一個圓
    ctx.beginPath()
    ctx.arc(circle1_center[0], circle1_center[1], circle1_radius, 0, 2 * math.pi)
    ctx.stroke()

    # 繪製第二個圓
    ctx.beginPath()
    ctx.arc(circle2_center[0], circle2_center[1], circle2_radius, 0, 2 * math.pi)
    ctx.stroke()

    # 繪製正方形1
    ctx.strokeStyle = 'red'
    ctx.beginPath()
    ctx.rect(square1_x, square1_y, square1_size, square1_size)
    ctx.stroke()

    # 繪製正方形2
    ctx.strokeStyle = 'blue'
    ctx.beginPath()
    ctx.rect(square2_x, square2_y, square2_size, square2_size)
    ctx.stroke()

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 判斷點是否在正方形內
def is_point_in_square(px, py, x, y, side_length):
    return x <= px <= x + side_length and y <= py <= y + side_length

# 判斷點是否在對角線上方
def is_point_above_diagonal(px, py, slope=1):
    return py < slope * px

# 判斷點是否在對角線下方
def is_point_below_diagonal(px, py, slope=1):
    return py > slope * px

# 顯示著色區域
def color_regions():
    # 繪製圖形
    draw_shapes()

    # 掃描大格點區域
    for x in range(0, canvas_width, step_size):  # x 從 0 到畫布寬度，步長為 step_size
        for y in range(0, canvas_height, step_size):  # y 從 0 到畫布高度，步長為 step_size

            # 判斷區域，並設定顏色
            if is_point_in_circle(x, y, *circle1_center, circle1_radius):
                region = "circle1"  # 在第一圓內部
            elif is_point_in_circle(x, y, *circle2_center, circle2_radius):
                region = "circle2"  # 在第二圓內部
            elif is_point_in_square(x, y, square1_x, square1_y, square1_size):
                region = "square1"  # 在第一正方形內部
            elif is_point_in_square(x, y, square2_x, square2_y, square2_size):
                region = "square2"  # 在第二正方形內部
            elif is_point_above_diagonal(x, y):
                region = "diagonal_above"  # 在對角線上方
            elif is_point_below_diagonal(x, y):
                region = "diagonal_below"  # 在對角線下方
            elif y < square1_y:
                if x < square1_x:
                    region = "top_left"  # 上左交界區域
                elif x >= square1_x + square1_size:
                    region = "top_right"  # 上右交界區域
                else:
                    region = "top"  # 上方區域
            elif y >= square1_y + square1_size:
                if x < square1_x:
                    region = "bottom_left"  # 下左交界區域
                elif x >= square1_x + square1_size:
                    region = "bottom_right"  # 下右交界區域
                else:
                    region = "bottom"  # 下方區域
            else:
                if x < square1_x:
                    region = "left"  # 左側區域
                elif x >= square1_x + square1_size:
                    region = "right"  # 右側區域
                else:
                    region = "top"  # 預設為上方區域

            # 設定圓點顏色
            ctx.fillStyle = colors[region]

            # 畫圓點
            ctx.beginPath()
            ctx.arc(x, y, circle_radius, 0, 2 * math.pi)  # 半徑為 circle_radius 的圓
            ctx.fill()

# 呼叫畫圖函式
color_regions()
</script>
</p>
<h3>w14_ex</h3>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import random
import math
 
# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    # 創建一個 canvas 元素，並設置其寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    # 將創建的 canvas 元素添加到指定的 HTML div 元素中
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div <= canvas  # 將 canvas 插入到該 div 中
     
    # 獲取 canvas 的 2D 繪圖上下文，這是進行繪圖的主要接口
    ctx = canvas.getContext("2d")
     
    # 返回畫布和它的 2D 繪圖上下文
    return canvas, ctx
 
# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串
 
# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    (cx, cy) 為圓心坐標，r 為圓的半徑。
    """
    # 使用圓的方程 (px - cx)² + (py - cy)² <= r² 判斷點是否在圓內
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2
 
# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    """
    根據傳入的三個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。
    x1, y1, r1 是圓1的圓心坐標和半徑
    x2, y2, r2 是圓2的圓心坐標和半徑
    x3, y3, r3 是圓3的圓心坐標和半徑
    """
    # 初始化畫布，創建並取得畫布和其 2D 上下文
    canvas, ctx = initialize_canvas(400, 400)
     
    # 清空畫布，以便重新繪製
    ctx.clearRect(0, 0, canvas.width, canvas.height)
     
    # 顏色區域存儲字典，存儲不同區域的顏色
    color_dict = {}
 
    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標
        # 當前掃描線的顏色初始化為 None，後面會根據位置選擇顏色
        current_color = None 
 
        # 遍歷當前行中的每個像素點 (px, py)
        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標
            # 判斷該點是否在圓1內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            # 判斷該點是否在圓2內
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            # 判斷該點是否在圓3內
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
             
            if in_circle1 and in_circle2 and in_circle3:
                # 如果點同時在三個圓內，則是交集區域
                if "intersection_all" not in color_dict:
                    # 如果還沒有為交集區域分配顏色，則分配一個隨機顏色
                    color_dict["intersection_all"] = random_color_generator()
                # 設置當前掃描線的顏色為三圓交集區域的顏色
                current_color = color_dict["intersection_all"]
            elif in_circle1 and in_circle2:
                # 如果點在圓1和圓2的交集區域
                if "intersection_12" not in color_dict:
                    color_dict["intersection_12"] = random_color_generator()
                current_color = color_dict["intersection_12"]
            elif in_circle1 and in_circle3:
                # 如果點在圓1和圓3的交集區域
                if "intersection_13" not in color_dict:
                    color_dict["intersection_13"] = random_color_generator()
                current_color = color_dict["intersection_13"]
            elif in_circle2 and in_circle3:
                # 如果點在圓2和圓3的交集區域
                if "intersection_23" not in color_dict:
                    color_dict["intersection_23"] = random_color_generator()
                current_color = color_dict["intersection_23"]
            elif in_circle1:
                # 如果點只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 如果點只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 如果點只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 如果點不在任何圓內，則是背景區域
                current_color = "white"  # 背景色設為白色
 
            # 設置當前像素的顏色並進行填充
            ctx.fillStyle = current_color
            # 填充當前像素 (px, py)，並且寬度和高度均為 1 像素
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素
 
# 直接設定圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 150, 100  # 圓3：圓心 (200, 150)，半徑 100
 
# 呼叫畫圓函式，並繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</script>
</p>
<h3>w15</h3>
<p></p>
<div>題目1:</div>
<div><a href="https://mdecp2024.github.io/hw-Steven901128/content/Brython.html?src=https://gist.githubusercontent.com/Steven901128/03079d29fdc3ccfda9de2dbce5b26917/raw/d4968f2abfa019e83fb78605e25dea26c8d9d2d4/1.">從 1 累加到 100</a></div>
<div></div>
<div>題目2:</div>
<div><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/1302cf8b3ac8250f9e1b9714343fe25f/raw/41a67c3fb5b64ab5796045bb6e74d786a308db75/w15-2.py">addto</a></div>
<div></div>
<div>題目3:</div>
<div><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/1302cf8b3ac8250f9e1b9714343fe25f/raw/41a67c3fb5b64ab5796045bb6e74d786a308db75/w15_hw-3.py">add_only_even</a></div>
<div></div>
<div></div>
<div>題目4:</div>
<div><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/1302cf8b3ac8250f9e1b9714343fe25f/raw/4e7b58735c5efcc4d2ffd3b9084ccae4ef5b5900/w15_hw-4.py">add_avoid_8</a></div>
<div></div>
<div>補充:</div>
<div><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/1302cf8b3ac8250f9e1b9714343fe25f/raw/e859237185afa51440f92b7d4209880ef0b00100/w15_-5.py">去除3跟8</a></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div <= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 檢查所有圓是否有重疊
def ensure_no_isolated_circles(circles):
    overlap = [False] * len(circles)
    for i in range(len(circles)):
        for j in range(i + 1, len(circles)):
            cx1, cy1, r1 = circles[i]
            cx2, cy2, r2 = circles[j]
            distance = math.sqrt((cx1 - cx2) ** 2 + (cy1 - cy2) ** 2)
            if distance <= r1 + r2:  # 判斷是否有重疊
                overlap[i] = True
                overlap[j] = True
    return all(overlap)

# 使用者設定的多個圓，並進行掃描線填充
def draw_circles():
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    color_dict = {}

    # 隨機生成 5 到 10 個圓，確保沒有圓是孤立的
    while True:
        num_circles = random.randint(5, 10)
        circles = [
            (random.randint(50, 350), random.randint(50, 350), random.randint(50, 100))
            for _ in range(num_circles)
        ]
        if ensure_no_isolated_circles(circles):
            break

    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            overlapping_indices = []

            for i, (cx, cy, r) in enumerate(circles):
                if is_point_in_circle(px, py, cx, cy, r):
                    overlapping_indices.append(i)

            if overlapping_indices:
                overlap_key = "_".join(map(str, sorted(overlapping_indices)))
                if overlap_key not in color_dict:
                    color_dict[overlap_key] = random_color_generator()
                current_color = color_dict[overlap_key]
            else:
                current_color = "white"

            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)

draw_circles()
</script>
</p><h1>HW2</h1>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

ctx.lineWidth = 1
ctx.strokeStyle = 'blue'  
ctx.beginPath() 
ctx.moveTo(10, 10)
ctx.lineTo(210, 210)
ctx.stroke()
</script>
</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form abframeid="iframe.0.606972202543562" abineguid="682B231DD6CC48F485393A1CD7741179"><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form abframeid="iframe.0.606972202543562" abineguid="8A9017155032403C8E2B7EB831CF281A"><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>